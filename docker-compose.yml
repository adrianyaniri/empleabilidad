services:
  app:
    container_name: app_backend
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - PORT=${PORT}
    image: app_emp:${IMAGE_TAG}
    ports:
      - "${PORT}:${PORT}"
    env_file:
      - .env
    volumes:
      - .:/app:delegated
      - node_modules:/app/node_modules
    depends_on:
      - database
    networks:
      api_network:
        #ipv4_address: 172.19.0.4

  database:
    container_name: app_database
    restart: unless-stopped
    image: postgres:15-alpine3.20
    ports:
      - "${DB_PORT}:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    env_file:
      - .env
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      api_network:
        #ipv4_address: 172.19.0.2

volumes:
  node_modules:
  database:

networks:
  api_network:
    external: true
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.19.0.0/24
